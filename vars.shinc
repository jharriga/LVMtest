#----------------------------------------
# START GLOBAL VARIABLES
#
# List of dependencies - verfied by 'chk_dependencies' function
DEPENDENCIES_arr=(
  "fio"                  # I/O workload generator
  "parted" "fdisk"       # partition tools
  "pvs" "lvs" "pvcreate" "vgcreate" "lvcreate"  # LVM utils
  "dmsetup" "bc"         # function cacheStats
)

# Access Type for testing: lvmblock or lvmxfs
accessTYPE="lvmblock"
#accessTYPE="lvmxfs"

########################################################### 
# DEVICE vars
#
# SLOW device vars
slowDEV=/dev/sdb
#slowDEV=/dev/sdc
slowVG="vg_slow"
slowLV="lv_slow"
slowLVPATH="/dev/${slowVG}/${slowLV}"
slowMNT="/mnt/slowdev"

# FAST device vars
#fastDEV=/dev/sdd
fastDEV=/dev/nvme0n1
fastVG="vg_fast"
fastLV="lv_fast"
fastLVPATH="/dev/${fastVG}/${fastLV}"
fastMNT="/mnt/fastdev"

# LVMcached device vars
cacheVG="vg_cache"
cachedataLV="lv_cache_data"
cachemetaLV="lv_cache_meta"
cachedLV="lv_cached"
originLV="${cachedLV}"
cachedLVPATH="/dev/${cacheVG}/${cachedLV}"
cachedMNT="/mnt/lvmcached"
cachePOLICY="smq"
cacheMODE="writethrough"

# set the SCRATCH location based on accessTYPE
if [ "$accessTYPE" = "lvmblock" ]; then
  slowSCRATCH=$slowLVPATH
  fastSCRATCH=$fastLVPATH
  cachedSCRATCH=$cachedLVPATH
elif [ "$accessTYPE" = "lvmxfs" ]; then
  slowSCRATCH="${slowMNT}/fio_scratch"
  fastSCRATCH="${fastMNT}/fio_scratch"
  cachedSCRATCH="${cachedMNT}/fio_scratch"
else
  echo "Fatal error: invalid value for 'accessTYPE' in vars.shinc file"
  exit 1
fi

########################################################### 
# Calculate the SIZEs, all based on unitSZ and cache_size values
# cache_size sets the LVMcache_data size
unitSZ="G"
let cache_size=10

# Size of the Cache
#  sets fastDEV size for lvcreate in Utils/setupLVM.shinc
#  sets LVMcache_data size for lvconvert in Utils/setupCACHE.shinc
cacheSZ="$cache_size$unitSZ"

# Calculate percentages used to roundup/down sizes
ten_percent=$(($cache_size / 10))
twenty_percent=$(($ten_percent * 2))
# Remember - bash only supports integer arithmetic
# exit if the roundups are not integers
if [ $ten_percent -lt 1 ]; then
  echo "Math error in vars.shinc - var 'ten_percent' must be integer >= 1"
  exit 1
fi

## Continue defining the 'SZ' vars used by the scripts
#

# runLVM.sh and runNVME.sh SIZE Variables ---------------------
#   - runLVM.sh tests both the slowDEV and fastDEV
#   - runNVME.sh tests only the fastDEV
#
# Size of the fastDEV used by lvcreate in Utils/setupLVM.shinc
#   roundup by 20%
fast_calc=$(($cache_size + $twenty_percent))
fastSZ="$fast_calc$unitSZ"
#
# Size of the slowDEV used by lvcreate in Utils/setupLVM.shinc
#   ten times size of cache
slow_calc=$(($cache_size * 10))
slowSZ="$slow_calc$unitSZ"
#
# Array of sizes used by fio in runLVM.sh
#   one tenth of cache size
#   cache size
lvm1_calc=$(($cache_size / 10))
lvm2_calc=$cache_size
lvmSize1="$lvm1_calc$unitSZ"; lvmSize2="$lvm2_calc$unitSZ"
LVMsize_arr=("${lvmSize1}" "${lvmSize2}")
#LVMsize_arr=("${lvmSize2}" "${lvmSize2}")
#
# Size of scratch file created by fio in runLVM.sh
#   equal to cache size plus 10%
# NOTE: must be less than 'fast_calc'
scratchLVM_calc=$(($cache_size + $ten_percent))
scratchLVM_SZ="$scratchLVM_calc$unitSZ"

# runCACHE.sh SIZE Variables ---------------------
#
# LVMcache_metadata size is one tenth size of LVMcache_data
#   used by lvconvert in Utils/setupCACHE.shinc
metadata_calc=$(($cache_size / 10))
metadataSZ="$metadata_calc$unitSZ"
#
# Size of the origin lvm device used by lvcreate in Utils/setupCACHE.shinc
originSZ="${slowSZ}"
#
# Array of sizes used by fio in runCACHE.sh
# Three size scenarios:
#   cacheSize1=Cache size less 20%
#   cacheSize2=ten times cacheSize1
#   cacheSize1=Cache size less 20%
cache1_calc=$(($cache_size - $twenty_percent))
#cache2_calc=$(($cache_size * 3))
cache2_calc=$(($cache1_calc * 10))
cache3_calc=$(($cache2_calc + $ten_percent))
cacheSize1="$cache3_calc$unitSZ"
#cacheSize1="$cache1_calc$unitSZ"; cacheSize2="$cache2_calc$unitSZ"
CACHEsize_arr=("${cacheSize1}" "${cacheSize1}" "${cacheSize1}")
#
# Size of scratch file created by fio in runCACHE.sh
# pad it a bit so we don't overrun the end
#scratchCACHE_calc=$(($cache2_calc + $cache1_calc))
scratchCACHE_calc=$(($cache2_calc + $twenty_percent))
scratchCACHE_SZ="$scratchCACHE_calc$unitSZ"

########################################################### 
# FIO Variables
fioOP="randrw"
#fioOP="read"
percentRD="100"
BLOCKsize_arr=("4M")
#BLOCKsize_arr=("64k" "64k" "64k" "4M" "4M" "4M")
iod="16"
# runtime and ramptime are only used by runCACHE.sh
runtime="300"
ramptime="300"
# randDIST is only used by runCACHE.sh
# valid values are 'random' (fio default) or 'zipf:<theta>'
# For 'zipf', use the fio/t/fio_genzip tool to visualize the distribution
# A <theta> of 0.8 distributes ~50% of hits within 10% of the space 
#randDIST="random"
randDIST="zipf:0.8"

# IODEPTH_arr is only used by runNVME.sh
IODEPTH_arr=( "8" "16" "16" "16" "32" )

# Results strings used in 'fio_*' functions
bw_rw_read=""
iops_rw_read=""
lat_rw_read=""
bw_rw_write=""
iops_rw_write=""
lat_rw_write=""

# Array used in cacheStats function
# Stores cache stats from last call - used to calculate deltas
# for 'Demotions, Promotions, Dirty'
# initialize as empty integer array, used in runCACHE.sh
declare -ia lastCS_arr=()

########################################################### 
# HOUSEKEEPING vars
#
# Timestamp logfile
ts="$(date +%Y%m%d-%H%M%S)"
# Name of the program being run
PROGNAME=$(basename $0)
# LOGFILE - records steps
RESULTSDIR="./RESULTS"
LOGFILE="${RESULTSDIR}/${PROGNAME}_${ts}.log"
# Logfile date format, customize it to your wishes
#   - see man date for help
DATE='date +%Y/%m/%d:%H:%M:%S'

# END GLOBAL VARIABLES
#--------------------------------------

